@page "/"

@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Schedule
@using Microsoft.JSInterop;

<EjsSchedule TValue="AppointmentData" @ref="ScheduleObj" CssClass="my-schedule" Width="100%" Height="650px" SelectedDate="@(new DateTime(2019, 1, 31))" @bind-CurrentView="@CurrentView">
    <ScheduleGroup Resources="@GroupData"></ScheduleGroup>
    <ScheduleResources>
        <ScheduleResource DataSource="@ProjectData" Field="ProjectId" Title="Choose Project" Name="Projects" TextField="text" IdField="id" ColorField="color"></ScheduleResource>
        <ScheduleResource DataSource="@TaskData" Field="TaskId" Title="Category" Name="Categories" TextField="text" IdField="id" GroupIDField="groupId" ColorField="color" AllowMultiple="true"></ScheduleResource>
    </ScheduleResources>
    <ScheduleViews>
        <ScheduleView Option="View.TimelineDay"></ScheduleView>
        <ScheduleView Option="View.TimelineWeek"></ScheduleView>
        <ScheduleView Option="View.TimelineWorkWeek"></ScheduleView>
        <ScheduleView Option="View.TimelineMonth"></ScheduleView>
        <ScheduleView Option="View.Agenda"></ScheduleView>
    </ScheduleViews>
    <ScheduleEventSettings DataSource="@DataSource"></ScheduleEventSettings>
    <ScheduleEvents TValue="AppointmentData" EventRendered="OnEventRendered"></ScheduleEvents>
</EjsSchedule>

<style>
    .my-schedule.e-schedule .e-timeline-view .e-resource-cells,
    .my-schedule.e-schedule .e-timeline-month-view .e-resource-cells,
    .my-schedule.e-schedule .e-timeline-view .e-work-cells,
    .my-schedule.e-schedule .e-timeline-month-view .e-work-cells {
        height: 100px;
    }

        .my-schedule.e-schedule .e-timeline-view .e-resource-cells.e-parent-node,
        .my-schedule.e-schedule .e-timeline-month-view .e-resource-cells.e-parent-node,
        .my-schedule.e-schedule .e-timeline-view .e-work-cells.e-resource-group-cells,
        .my-schedule.e-schedule .e-timeline-month-view .e-work-cells.e-resource-group-cells {
            height: 40px;
        }
</style>

@code{
    EjsSchedule<AppointmentData> ScheduleObj;
    [Inject]
    protected IJSRuntime JsRuntime { get; set; }
    protected override void OnAfterRender(bool firstRender)
    {
        this.JsRuntime.Ejs().EnableRipple(true).LoadLocaleData("wwwroot/css/locale.json").LoadCldrData(new string[] { "wwwroot/css/numberingSystems.json", "wwwroot/css/ca-gregorian.json", "wwwroot/css/numbers.json", "wwwroot/css/timeZoneNames.json" }).SetCulture("fr-CH");
    }
    public View CurrentView = View.TimelineWeek;
 
    public async void OnEventRendered(EventRenderedArgs<AppointmentData> args)
    {
        if (CurrentView != View.Agenda)
        {
            var style = await args.Element.GetAttribute("Style");
            string height = style.ToString() + "height:98px;"; //reduce two pixels from the height of work cells for borders
            args.Element.SetAttribute("Style", height);
        }
    }
    List<AppointmentData> DataSource = new List<AppointmentData>
{
        new AppointmentData { Id = 1, Subject = "Meeting", StartTime = new DateTime(2019, 1, 31, 9, 30, 0) , EndTime = new DateTime(2019, 1, 31, 11, 0, 0), ProjectId = 1, TaskId = 2 }
    };
    public string[] GroupData = new string[] { "Projects", "Categories" };
    private List<object> ProjectData { get; set; } = new List<object> {
        new {text = "PROJECT 1", id= 1, color= "#cb6bb2"},
        new {text = "PROJECT 2", id= 2, color= "#56ca85"},
        new {text = "PROJECT 3", id= 3, color= "#df5286"}
    };
    private List<object> TaskData { get; set; } = new List<object> {
        new { text = "Nancy", id= 1, groupId = 1, color = "#df5286" },
        new { text = "Steven", id= 2, groupId = 1, color = "#7fa900" },
        new { text = "Robert", id= 3, groupId = 2, color = "#ea7a57" },
        new { text = "Micheal", id= 5, groupId = 3, color = "#df5286" }
    };
    public class AppointmentData
    {
        public int Id { get; set; }
        public int ProjectId { get; set; }
        public int TaskId { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string EventType { get; set; }
        public string Description { get; set; }
        public bool IsAllDay { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
    }
}
